------------------------------------------------------------Abstract class(Абстрактные класы)---------------------------------------------------------------------
1)Добавить абстракцию в 1 задание HW02.
Сделать абстрактными все необходимые классы. 
Сделать метод sayHello() абстрактным для тех классов, где это необходимо.
Придумать еще два абстрактных метода для абстрактных классов, которые будут реализовываться наследниками
по разному.
Унаследовать класс Белая Акула и Тигровая Акула от класса Акула. Обновить после этого логику абстракции.



2)
Есть абстрактная фигура Shape. Она имеет одно поле - сторону a.
От нее наследуются следующие дети. У детей могут быть еще какието поля в зависимости от фигуры.
Shape(double a)
	Треугольник
	Квадрат
	Прямоугольник
	Паралелограм
	Ромб
	Трапеция
Переопределить для всех наследников метод нахождения площади.


-----------------------------------------------------------------Interfaces(Интерфейсы)-------------------------------------------------------------------------

3)Есть класы 
Human(firsNname, surname, age, gender), 
Tornado(powerMark, speed), 
Car(label, model, price)
Написать следуюие интерфейсы, для которых надо реализовать методы внутри указаных классов.
 -Moveable
	-move(), который будет сообщать что кто или что движеться в Киев.
	-move(String whereMove), который будет выводить на екран кто или что движеться и куда.
 -Eatable(только для Human and Car)
	-eat(), который будет сообщать что человек поел лапшу или в машину залили плохой бензин.
	-eat(String whatEat), который будет сообщать что человек поел whatEat или в машину залили бензин whatEat.
 -Jumpable(только для человека)
	-jump(), который сообщает что человек подпрыгнул на высоту от 0.5 до 1.5 метров(вычисление рандомное)


4)Добавить абстракцию в предыдущее задание с Animal. Теперь всех видов животных может быть сколько угодно, а не в еденичном экземпляре.
Переопределить для всех животных следующие методы и добавить возможность их вызывать з програмы.
Метод introduce() должен быть абстрактным в родительском классе.
-introduce(собака будет гавкать столько раз сколько у нее scaryLevel
	   папугай произнесет, в остортированом по размеру слов порядке, все , которые знает
	   рыбка издаст звук "БульБуль")
Метод extraAbility() должен быть в интерфейсе Extra
-extraAbility(собака прогавкает 10 - 14 раз("Гав") и вкноце завоет("Аууууууууууу")
	      папугай выучит свое имя, и потом назовет себя любым именем из списка слов, которые знает(если он уже знает свое имя, то ничего не выучит и только сменит имя)
	      рыбка c определеной вероятностью либо вырастет либо уменьшиться в два раза)



5)Создать интерфейс SortService, в котором будут следующие методы
- void sort(int[] array) - метод, который сортирует массив чисел
- void sort(String[] array) - метод, который сортирует массив строк в алфавитном порядке
- void sort(Shape[] array) - метод, который сортирует массив фигур по площади
Необходимо написать классы, который имплементируют интерфейс Sortable и реализуют все его методы.
5.1)Класс BubbleSortService, реализующий методы интерфейса SortService пузырьковой сортировкой(Bubble Sort).
5.2)Класс SelectionSortService, реализующий методы интерфейса SortService сортировкой выбором(Selection Sort).
5.3)Класс InsertionSortService, реализующий методы интерфейса SortService сортировкой вставками(Insertion Sort).
5.4)Класс MergeSortService, реализующий методы интерфейса SortService сортировкой слиянием(MergeSort).
5.5)Класс QuickSortService, реализующий методы интерфейса SortService быстрой сортировкой(QuickSort).
5.6)Посчитать время сортировки для каждого метода сортировки, для массивов чисел, строк и фигур. Массив должен быть размером 25_000.
5.7)Написать интерфейс Cuttable, который будет имлементировать QuickSortService с методами
- int[] getCutted(int[] array, int n); - метод получает 1/n часть массива чисел в самом начале.
- int[] getCutted(int[] array, int n, int m) - метод получает m-ную среди 1/n частей массива чисел(m <= n, n != 0, m != 0)
