-------------------------------------------------------------Reflection----------------------------------------------------------

1)Написать методы для следующих операций использующих рефлексию и дженерики.
1.1)Метод для получения имени класа (без названия пакета).
1.2)Метод для получения по класу мапы, где ключ это названия типа поля, а значение имя поля.
1.3)Метод для получения списка всех имен всех методов класа.
1.4)Метод для получения списка всех конструкторов класа.
1.5)Метод для получения списка всех имен интерфейсов класа(без имени пакета)
1.6)Метод для получения имени суперкласа(без имени пакета).
1.7)Метод для получения имени пакета, в котором находиться класс.
1.8)Метод для получения списка всех имен всех аннотаций класса(без имени пакета).
1.9)Метод для получения всех констант перечеслений переданного перечисления.
1.10)Метод для получения имен только тех полей, которые являються прмитивами.
1.11)Метод для получения имен только тех полей, которые являються массивами.



2)Есть клас Calculator. В нем есть приватные методы getPI(), plus(int a, int b), minus(int a, int b), multiply(int a, int b), 
arraySum(int.. arr), listSum(List<Integer> list), factorial(int n). Создать методы, которые позволят испольовать данные 
приватные методы.

-----------------------------------------------------------Annotation.Формат Json-------------------------------------------------------------------

3)Написать аннотации для класа Student(name, surname, age, Gender, averageMark). Все они должны учитываться во время вывода 
студента методом toString(). Также будет класс StudentDecorator(), который будет обверткой для всех методов класса Student. Все
методы будут вызываться через него.
3.1)@MyClass(name) - аннотация, которая будет во время выводом информации про студента методом toString() называть студента либо
названием переданым как параметр аннотации name либо именем класса.
3.2)@BlockedClass() - если эта аннотация стоит над классом, это значит что все его методы заблокированы для работы с ними.
3.3)@MyField(name) - аннотация, которая ставиться над полем класа, а если она не стоит, то поле не учитываеться при выводе.
Если в параметре аннотации name есть слово, то оно будет заменять имя поля при выводе.
3.4)@MyMethod() - аннотация, которая ставиться над методом. Если ее нет, то метод нельзя будет вызвать.
3.5)@BlockedToString -если над классом стоит эта аннотация, это значит что в любом случае не будет доступен петод вывода toString().



4)Написать програму json-сериализатор, которая переводит экземпляр класа в json независимо от того какие поля есть у класса (поля 
любых типов, масивы, перечисления или другие обьекты).
Над класом должна стоять аннотация JsonEntity чтоб отметить что клас может обрабатывать сериализатор.
Над полем класа должна быть аннотация JsonField. Если ее нет значит поле не береться во внимание при сериализации.
Результат сериализации должен записываться в файл.


